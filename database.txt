База данных:
Таблица operators - текущее состояние
operator_group_history
operator_ext_history
 - заносятся данные, если в документе изменилось значение и таблица operators должна быть изменена

create table operator_ext_history (
op_id integer references operators,
op_eh_tmstmp timestamp,
op_eh_old varchar,
op_eh_new varchar
);

create table operator_group_history (
op_id integer references operators,
op_gh_tmstmp timestamp,
op_gh_old varchar,
op_gh_new varchar
);


create table operators (
op_id serial primary key,
op_name varchar,
op_ext varchar,
op_group varchar,
op_location varchar
);

create or replace function operators_history() returns trigger as $op_hist$
begin
  -- TG_OP
  if (TG_OP = 'INSERT') then -- insert
    insert into operator_group_history select new.op_id, now(), null, new.op_group;
    insert into operator_ext_history select new.op_id, now(), null, new.op_ext;
    return new;
  elsif (TG_OP = 'DELETE') then -- will never success
    insert into operator_group_history select old.op_id, now(), old.op_group, null;
    insert into operator_ext_history select old.op_id, now(), old.op_ext, null;
    return old;
  elsif (TG_OP = 'UPDATE') then
    if (new.op_group <> old.op_group) then
      insert into operator_group_history select new.op_id, now(), old.op_group, new.op_group;
    end if;

    if (new.op_ext <> old.op_ext) then
      insert into operator_ext_history select new.op_id, now(), old.op_ext, new.op_ext;
    end if;
    return new;
  end if;
  return null;
end;
$op_hist$ language plpgsql;

create trigger change_op_group after insert or update or delete on operators for each row execute procedure operators_history();

grant select, insert, update, delete on operators to cc_populate;
grant select on operators_op_id_seq to cc_populate;
grant select, insert, update on operator_ext_history to cc_populate;
grant select, insert, update on operator_group_history to cc_populate;

create table sip_users (
su_id serial primary key,
su_host varchar,
su_username varchar,
su_secret varchar,
su_myext varchar,
su_phone varchar
);

create table extensions (
ext_n varchar primary key,
ext_pw varchar
);

grant select,insert,update,delete on extensions to cc_populate;
grant select on sip_users to cc_populate ;

create table shops (
shop_id serial primary key,
shop_name varchar,
shop_eid varchar,
shop_phone varchar,
shop_script varchar,
shop_manager varchar,
shop_manager2 varchar,
shop_active varchar,
shop_queue2 varchar,
shop_queue3 varchar,
shop_level varchar,
lk_id integer
);
grant select,insert,update  on shops to cc_populate;


...call_log
manager
external
order id
note
status


create table shop_ext (
shop_id integer,
shop_ext varchar,
shop_ext_tmstmp timestamp
);


create user cc_data login;
grant select on shops to cc_data;
create view sip_ext (myext, phone) as select su_myext, su_phone from sip_users;
grant select on sip_ext to cc_data;

create table tags (
tag_id serial primary key,
tag_name varchar unique,
tag_hasdata boolean
);
// populate with call tags
grant select on tags to cc_data;


create table call_status (
  cs_id bigserial primary key,
  cs_op integer references operators(op_id),
  cs_phone varchar,
  cs_order varchar,
  cs_note varchar,
  cs_tag integer references tags (tag_id)
);


create or replace function check_ext_pw(ext varchar, pw varchar) returns integer as $$
declare
  r integer;
begin
  select count(*) into r from extensions where ext_n=ext and ext_pw=pw;
  return r;
end;
$$ language plpgsql;

grant EXECUTE on function check_ext_pw(varchar, varchar) to cc_data;

-- специальный тэг
insert into tags (tag_name) values ('Без записи');

create table call_log (
  cl_id bigserial primary key, cl_rand char(32),
  cl_tag integer references tags (tag_id), 
  cl_tagdata varchar, 
  cl_operator integer references operators(op_id), 
  cl_operator_name varchar;
  cl_rec_uid varchar,
  cl_client_phone varchar, 
  cl_shop_phone varchar,
  cl_shop_name varchar,
  cl_ring_time timestamp,
  cl_answer_time timestamp,
  cl_end_time timestamp,
  cl_close_time varchar,
  cl_note varchar,
  cl_order varchar,
  cl_uid varchar,
  cl_direction varchar
);
#create unique index on call_log (cl_uid);

grant select, insert, update on call_log to cc_data;
grant select, update on call_log_cl_id_seq to cc_data;
grant select on operators to cc_data;

create table levels (
  l_id serial primary key,
  l_name varchar,
  l_worktime varchar
);

grant SELECT, insert, update, delete on levels to cc_populate;
grant SELECT, update on levels_l_id_seq to cc_populate;


create user cdr login password '...';
CREATE TABLE cdr
(
id serial NOT NULL,
calldate timestamp with time zone NOT NULL DEFAULT now(),
clid character varying(80),
src character varying(80),
dst character varying(80),
dcontext character varying(80),
channel character varying(80),
dstchannel character varying(80),
lastapp character varying(80),
lastdata character varying(80),
duration integer NOT NULL DEFAULT 0,
billsec integer NOT NULL DEFAULT 0,
disposition character varying(45),
amaflags integer NOT NULL DEFAULT 0,
accountcode character varying(20),
uniqueid character varying(150),
userfield character varying(255),
recordingfile varchar,
CONSTRAINT cdr_pkey PRIMARY KEY (id)
)
WITH (OIDS=FALSE);
CREATE INDEX billsec ON cdr USING btree (billsec);
CREATE INDEX calldate ON cdr USING btree (calldate);
CREATE INDEX dst ON cdr USING btree (dst);
CREATE INDEX src ON cdr USING btree (src);

grant insert on cdr to cdr;
grant select on cdr to cc_data;

create table leads (
l_id bigserial not null,
l_shop_name varchar,
l_shop_phone varchar,
l_shop_eid varchar,
l_client_phone varchar,
l_note varchar,
l_order varchar,
l_when timestamp with time zone,
l_lock_time timestamp with time zone,
l_lock_by varchar references operators(op_ext),
l_completed boolean default false
);

grant select,insert,update on leads to cc_data;

create unique index on operators(op_ext);
