База данных:
Таблица operators - текущее состояние
operator_group_history
operator_ext_history
 - заносятся данные, если в документе изменилось значение и таблица operators должна быть изменена

create table operator_ext_history (
op_id integer references operators,
op_eh_tmstmp timestamp,
op_eh_old varchar,
op_eh_new varchar
);

create table operator_group_history (
op_id integer references operators,
op_gh_tmstmp timestamp,
op_gh_old varchar,
op_gh_new varchar
);


create table operators (
op_id serial primary key,
op_name varchar,
op_group varchar
)
;
alter table operators add op_ext varchar;


create or replace function operators_history() returns trigger as $op_hist$
begin
  -- TG_OP
  if (TG_OP = 'INSERT') then -- insert
    insert into operator_group_history select new.op_id, now(), null, new.op_group;
    insert into operator_ext_history select new.op_id, now(), null, new.op_ext;
    return new;
  elsif (TG_OP = 'DELETE') then -- will never success
    insert into operator_group_history select old.op_id, now(), old.op_group, null;
    insert into operator_ext_history select old.op_id, now(), old.op_ext, null;
    return old;
  elsif (TG_OP = 'UPDATE') then
    if (new.op_group <> old.op_group) then
      insert into operator_group_history select new.op_id, now(), old.op_group, new.op_group;
    end if;

    if (new.op_ext <> old.op_ext) then
      insert into operator_ext_history select new.op_id, now(), old.op_ext, new.op_ext;
    end if;
    return new;
  end if;
  return null;
end;
$op_hist$ language plpgsql;

create trigger change_op_group after insert or update or delete on operators for each row execute procedure operators_history();

grant select, insert, update on operators to cc_populate;
grant select on operators_op_id_seq to cc_populate;
grant select, insert, update on operator_ext_history to cc_populate;
grant select, insert, update on operator_group_history to cc_populate;

create table sip_users (
su_id serial primary key,
su_host varchar,
su_username varchar,
su_secret varchar,
su_myext varchar,
su_phone varchar
);

create table extensions (
ext_n varchar primary key,
ext_pw varchar
);

grant select,insert,update,delete on extensions to cc_populate;
grant select on sip_users to cc_populate ;

create table shops (
shop_id serial primary key,
shop_name varchar,
shop_phone varchar,
shop_pri_manager varchar,
shop_worktime varchar
);
grant select,insert,update  on shops to cc_populate;


...call_log
manager
external
order id
note
status


create table shop_ext (
shop_id integer,
shop_ext varchar,
shop_ext_tmstmp timestamp
);


create user cc_data login;
grant select on shops to cc_data;
create view sip_ext (myext, phone) as select su_myext, su_phone from sip_users;
grant select on sip_ext to cc_data;

create table tags (
tag_id serial primary key,
tag_name varchar unique
);
// populate with call tags
grant select on tags to cc_data;
